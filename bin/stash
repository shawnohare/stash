#!/usr/bin/env sh

set -e

usage() {
  cat << EOF
Usage: stash [-Dfv] [-h] [-t target] dir ...

OPTIONS:
  -t target  
        Specify target directory to link into. Defaults to $STASH_TARGET or parent.
  -f    Force the creation or removal of links from source to target.
  -D    Delete target links. If -f is set, also remove target files.
  -v    Verbose messages. Silent by default.
  -V    Print version number.
  -h    Display the man page or this usage message.
EOF
}


# Link a src dir $1 to target $2
stash() {
  cd "$1"

  # Copy source directory structure to target.
  find . -type d | while read -r dir; do mkdir -p "$2/${dir}"; done

  # link each source file to the target dir
  # We could find against full path but then we have to remove the prefix.
  find . -type f | while read -r path; do

    src="$1/${path}"
    tar="$2/${path}"

    # - Only stash when the target file (or link) does not exist. 
    if [ "${FORCE}" ] || [ ! -f "${tar}" ]; then
      [ "${verbose}" ] &&  printf "stash: ${src} -> ${tar}\n"
      ln -f -s "${src}" "${tar}"
    fi
  done
}

# unlink a src dir $1 to target $2
unstash() {
  cd "$1"

  # (un)stash each source file. 
  # We could find against full path but then we have to remove the prefix.
  find . -type f | while read -r path; do
    # src="$1/${path}"
    tar="$2/${path}"

    if [ "${FORCE}" ] || [ -L "${tar}" ]; then
      [ "${verbose}" ] &&  printf "unstash: ${tar}\n"
      rm -f "${tar}"
    fi
  done

  # Remove empty dirs in the source.
  find . -depth -type d | while read -r dir; do 
    dir="$2/${dir}"
    if [ -n "$(find "${dir}" -maxdepth 0 -type d -empty 2>/dev/null)" ]; then
      printf "unstash: ${dir}/\n"
      rmdir "${dir}" 
    fi
  done
}


main() {
  while getopts "DfhvVt:" opt; do
    case "${opt}" in
      D)
        cmd="unstash"
        shift
        ;;
      f)
        FORCE=1
        shift
        ;;
      h)
        man stash || usage 
        exit
        ;;
      v)
        verbose=1
        shift
        ;;
      V)
        printf "stash version 1.0.3\n"
        exit
        ;;
      t)
        target="${OPTARG}"
        shift 2
        ;;
      \?)
        usage
        exit 1
        ;;
    esac
  done

  cmd="${cmd:-stash}"
  target="${target:-${STASH_TARGET:-$(dirname $(pwd))}}"

  # Check if target is relative relative path (remove shortest prefix /)
  if [ "${target#/}" = "${target}" ]; then
    target="$(pwd)/${target}"
  fi

  for dir in "$@"; do
    [ "${dir#/}" = "${dir}" ] && dir="$(pwd)/${dir}"
    ${cmd} "${dir}" "${target}"
  done

}

main "$@"
