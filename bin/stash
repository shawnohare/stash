#!/usr/bin/env sh

set -e

# reset variables used in the script
# Note that [ "${x}" ] || <cmd> behaves differently than if [ ... ];
# Namely, if[ 0 ]
unset DRYRUN
unset FORCE
unset QUIET
unset UNLINK

usage() {
    cat <<EOF
Usage:
    stash [-dfuv] source target
    stash -h,--help
    stash -V,--version

OPTIONS:
    -f|--force         Force the creation or removal of links and files.
    -d|--dry-run       Dry-run mode. The filesystem is not modified.
    -u|--unlink|--rm   Delete (unlink) target links. If -f is set, also remove target files.
    -q|--quiet         Supress messages.
    -V|--version       Print version number.
    -h|--help          Display this this usage message.
EOF
}

msg() {
    [ "${QUIET}" ] || printf "stash: ${1}\n"
}

version() {
    msg "stash: Version 2.0.0"
}

unlink_file() {
    if [ "${FORCE}" ] || [ -L "$1" ]; then
        msg "Removing $1"
        [ "${DRYRUN}" ] || rm -f "$1"
    fi
}

# Link a specific file.
link_file() {
    if [ "${FORCE}" ] || [ ! -f "$2" ]; then
        msg "Linking $1 -> $2"
        [ "${DRYRUN}" ] || ln -f -s "$1" "$2"
    fi
}

# Link a src dir $1 to target $2
link_dir() {
    cd "$1"

    # Copy source directory structure to target.
    find . -type d | while read -r dir; do
        dir="$2/${dir}"
        # First, attempt to remove broken symlinked dirs.
        # if [ -L "${dir}" ] && [ ! -e "${dir}" ]; then
        #     msg "Removing symlink dir ${dir}"
        #     [ "${DRYRUN}" ] || rm "${dir}"
        # fi
        [ "${DRYRUN}" ] || mkdir -p "${dir}"
    done

    # link each source file to the target dir
    # We could find against full path but then we have to remove the prefix.
    find . -type f | while read -r path; do
        path="${path#??}"
        src="$1/${path}"
        tar="$2/${path}"
        link_file "${src}" "${tar}"
    done
}

# unlink a src dir $1 to target $2
unlink_dir() {
    cd "$1"

    # (un)stash each source file.
    # We could find against full path but then we have to remove the prefix.
    find . -type f | while read -r path; do
        # src="$1/${path}"
        tar="$2/${path#??}"
        unlink_file "${tar}"
    done

    # Remove empty dirs in the source.
    find . -depth -type d | while read -r dir; do
        dir="$2/${dir#??}"
        if [ -n "$(find "${dir}" -maxdepth 0 -type d -empty 2>/dev/null)" ]; then
            msg "Removing empty target dir ${dir}"
            [ "${DRYRUN}" ] || rmdir "${dir}"
        fi
    done
}

main() {
    # Handle long args.
    for arg in "$@"; do
        case "$1" in
        --help | -h)
            usage
            exit
            ;;
        --version | -V)
            version
            exit
            ;;
        --dry-run | -d)
            DRYRUN=1
            shift
            ;;
        --quiet | -q)
            QUIET=1
            shift
            ;;
        --force | -f)
            FORCE=1
            shift
            ;;
        --unlink | -u | --rm)
            UNLINK=1
            shift
            ;;
        *)
            break
            ;;
        esac
    done

    # # an opt like x: requires an arg.
    OPTIND=1
    while getopts "dfhqVu" opt; do
        case "${opt}" in
        d)
            DRYRUN=1
            ;;
        u)
            UNLINK=1
            ;;
        f)
            FORCE=1
            ;;
        q)
            QUIET=1
            ;;
        V)
            version
            exit
            ;;
        h)
            usage
            exit
            ;;
        \?)
            exit 1
            ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ "${DRYRUN}" ]; then
        msg "In dry-run mode. The filesystem will not be modified."
    fi

    if [ -z "$2" ]; then
        msg "ERROR. No target dir specified.\nTry 'stash -h' for help."
        exit 1
    fi

    # Convert relative source and target inputs to full paths.
    source="$1"
    if [ "${source#/}" = "${source}" ]; then
        source="$(pwd)/${source}"
    fi

    target="$2"
    if [ "${target#/}" = "${target}" ]; then
        target="$(pwd)/${target}"
    fi

    # Dispatch function based on source and mode.
    if [ "${UNLINK}" ]; then
        prefix="un"
    fi
    if [ -d "${source}" ]; then
        cmd="link_dir"
    else
        cmd="link_file"
    fi

    "${prefix}${cmd}" "${source}" "${target}"

}

main "$@"
